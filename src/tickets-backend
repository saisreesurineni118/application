 const port = 4000; 
 const express = require("express"); 
 const app = express(); 
 const mongoose = require("mongoose"); 
 const jwt = require("jsonwebtoken"); 
 const multer = require("multer"); 
 const path = require("path"); 
 const cors = require("cors"); 
 
 app.use(express.json()); 
 app.use(cors()); 
 
mongoose.connect(""); 
  
 const storage = multer.diskStorage({ 
    destination: './upload/images', 
    filename: (req, file, cb) => { 
      console.log(file); 
        return cb(null, ${file.fieldname}_${Date.now()}${path.extname(file.originalname)}) 
    } 
}) 
 const upload = multer({storage: storage}) 
 app.post("/upload", upload.single('ticket'), (req, res) => { 
    res.json({ 
        success: 1, 
        image_url: http: 
    }) 
}) 
 app.use('/images', express.static('upload/images')); 
 

 const fetchuser = async (req, res, next) => { 
  const token = req.header("auth-token"); 
  if (!token) { 
    res.status(401).send({ errors: "Please authenticate using a valid token" }); 
  } 
  try { 
    const data = jwt.verify(token, "secret_ecom"); 
    req.user = data.user; 
    next(); 
 
  } catch (error) { 
    res.status(401).send({ errors: "Please authenticate using a valid token" }); 
  } 
}; 
 
 

 const Users = mongoose.model("Users", { 
  name: { 
    type: String, 
  }, 
  email: { 
    type: String, 
    unique: true, 
  }, 
  password: { 
    type: String, 
  }, 
  TicketData: { 
    type: Object, 
  }, 
  date: { 
    type: Date, 
    default: Date.now, 
  }, 
}); 
 

const Tickets = mongoose.model("Tickets", {
    Available: {
        type:String,
    },
    Area: {
        type:String
    }
})
 
 app.get("/", (req, res) => { 
  res.send("Root"); 
  }); 
 app.post('/login', async (req, res) => { 
  console.log("Login"); 
    let success = false; 
    let user = await Users.findOne({ email: req.body.email }); 
    if (user) { 
        const passCompare = req.body.password === user.password; 
        if (passCompare) { 
            const data = { 
                user: { 
                    id: user.id 
                } 
            } 
   success = true; 
      console.log(user.id); 
   const token = jwt.sign(data); 
   res.json({ success, token }); 
        } 
        else { 
            return res.status(400).json({success: success, errors: "please try with correct email/password"}) 
        } 
    } 
    else { 
        return res.status(400).json({success: success, errors: "please try with correct email/password"}) 
    } 
}) 

 
  app.listen(port, (error) => { 
  if (!error) console.log("Server Running on port " + port); 
  else console.log("Error : ", error); 
});
